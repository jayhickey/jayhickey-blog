<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Jay Hickey</title><link href="http://jayhickey.com/" rel="alternate"></link><link href="http://jayhickey.com/feeds/08.atom.xml" rel="self"></link><id>http://jayhickey.com/</id><updated>2012-08-21T09:28:00-04:00</updated><entry><title>Purity Ring on Pitchfork's "+1" Series</title><link href="http://jayhickey.com/2012/08/purity-ring-on-pitchfork" rel="alternate"></link><updated>2012-08-21T09:28:00-04:00</updated><author><name>Jay Hickey</name></author><id>tag:jayhickey.com,2012-08-21:2012/08/purity-ring-on-pitchfork</id><summary type="html">&lt;p&gt;Pitchfork has put together a neat video showcasing Purity Ring's live show. It's amazing that such a young, up-and-coming band can have a high tech lighting rig these days. Obviously acts like &lt;a href="http://www.youtube.com/watch?v=cwZAoHpRZFE#t=1h16m48"&gt;Radiohead&lt;/a&gt; and &lt;a href="http://www.youtube.com/watch?v=8wCgxkQj_Qo"&gt;Pretty Lights&lt;/a&gt;&lt;sup id="fnref:bonnaroo"&gt;&lt;a class="footnote-ref" href="#fn:bonnaroo" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt; blow them out of the water visually, but they're also more established and successful. I've fast-forwarded&lt;sup id="fnref:ios"&gt;&lt;a class="footnote-ref" href="#fn:ios" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; the video below so you can see the setup in action. Cocoon shaped lights follow the lead singer around and respond in special ways to vocals and drums. Jump back about a minute to hear Purity Ring talk about how it works:&lt;/p&gt;
&lt;iframe src="http://www.youtube.com/embed/y0d4KSnaez4?autohide=1&amp;amp;fs=1&amp;amp;autoplay=0&amp;amp;iv_load_policy=3&amp;amp;rel=0&amp;amp;modestbranding=1&amp;amp;showinfo=0&amp;amp;hd=1#t=3m44" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Now I'm really excited for their show in Cincinnati this Saturday. If you're going to be in town, &lt;a href="http://www.ticketfly.com/purchase/event/125787?wrKey=9CC5F1864C942673A09EF939A64788BD"&gt;tickets are only $12&lt;/a&gt;. Purity Ring's&lt;sup id="fnref:name"&gt;&lt;a class="footnote-ref" href="#fn:name" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt; debut LP &lt;em&gt;Shrines&lt;/em&gt; is fantastic, so even if you can't go, make sure to at least check the album out.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:ios"&gt;
&lt;p&gt;If you're on an iOS or other mobile device, you probably won't be jumped forward. But in case you're wondering, I set the video to start 3 minutes and 44 seconds in.&amp;#160;&lt;a class="footnote-backref" href="#fnref:ios" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:name"&gt;
&lt;p&gt;Still having a tough time getting over how bad the name "Purity Ring" is. But in the end, it's the music that really matters I guess.&amp;#160;&lt;a class="footnote-backref" href="#fnref:name" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:bonnaroo"&gt;
&lt;p&gt;I was at the Bonnaroo show where this video was made, and those were definitely the coolest lights I'd ever seen. I don't even really listen to Pretty Lights, but the live show is a must see. I promise you won't regret it.&amp;#160;&lt;a class="footnote-backref" href="#fnref:bonnaroo" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary></entry><entry><title>Very Upset I'm Not Here Anymore</title><link href="http://jayhickey.com/2012/08/very-upset-im-not-here-anymore" rel="alternate"></link><updated>2012-08-21T03:16:00-04:00</updated><author><name>Jay Hickey</name></author><id>tag:jayhickey.com,2012-08-21:2012/08/very-upset-im-not-here-anymore</id><summary type="html">&lt;p&gt;&lt;a href="http://jayhickey.com/media/2012/08/hawaii-condo.jpg"&gt;&lt;img alt="Panorama" src="http://jayhickey.com/media/2012/08/hawaii-condo-thumb.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;(Click to enlarge)&lt;/p&gt;</summary></entry><entry><title>Last Sunset Picture, I Promise</title><link href="http://jayhickey.com/2012/08/last-sunset-picture" rel="alternate"></link><updated>2012-08-18T01:44:00-04:00</updated><author><name>Jay Hickey</name></author><id>tag:jayhickey.com,2012-08-18:2012/08/last-sunset-picture</id><summary type="html">&lt;p&gt;&lt;img alt="Ok last sunset picture, I promise" src="http://jayhickey.com/media/instagram/2012-08-18_054335.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;(Via &lt;a href="http://instagram.com"&gt;Instagram&lt;/a&gt;)&lt;/p&gt;</summary></entry><entry><title>Sailed and Went Swimming With Turtles Today</title><link href="http://jayhickey.com/2012/08/sailed-and-went-swimming-with-turtles" rel="alternate"></link><updated>2012-08-17T08:59:00-04:00</updated><author><name>Jay Hickey</name></author><id>tag:jayhickey.com,2012-08-17:2012/08/sailed-and-went-swimming-with-turtles</id><summary type="html">&lt;p&gt;&lt;img alt="Sailed and then went swimming with turtles today" src="http://jayhickey.com/media/instagram/2012-08-18_003315.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;(Via &lt;a href="http://instagram.com"&gt;Instagram&lt;/a&gt;)&lt;/p&gt;</summary></entry><entry><title>Haleakalā Volcano</title><link href="http://jayhickey.com/2012/08/haleakala-volcano" rel="alternate"></link><updated>2012-08-16T12:20:00-04:00</updated><author><name>Jay Hickey</name></author><id>tag:jayhickey.com,2012-08-16:2012/08/haleakala-volcano</id><summary type="html">&lt;p&gt;&lt;a href="http://jayhickey.com/media/2012/08/2012-08-16_040946.jpg"&gt;&lt;img alt="Haleakalā" src="http://jayhickey.com/media/2012/08/2012-08-16_033329.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;(Click to enlarge)&lt;/p&gt;
&lt;p&gt;We went 10,000 ft above sea level to the peak of Haleakalā Volcano on Maui today. The view was incredible. I felt like I was on Mars with the &lt;a href="http://en.wikipedia.org/wiki/Curiosity_rover"&gt;Curiosity rover&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If anyone is wondering, I created this panorama with &lt;a href="http://itunes.apple.com/us/app/autostitch-panorama/id318944927"&gt;Autostitch for iPhone&lt;/a&gt;.&lt;/p&gt;</summary></entry><entry><title>Rainbow Eucalyptus Tree</title><link href="http://jayhickey.com/2012/08/rainbow-eucalyptus-tree" rel="alternate"></link><updated>2012-08-16T06:15:00-04:00</updated><author><name>Jay Hickey</name></author><id>tag:jayhickey.com,2012-08-16:2012/08/rainbow-eucalyptus-tree</id><summary type="html">&lt;p&gt;&lt;img alt="Rainbow Eucalyptus Tree" src="http://jayhickey.com/media/instagram/2012-08-16_221521.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;(Via &lt;a href="http://instagram.com"&gt;Instagram&lt;/a&gt;)&lt;/p&gt;</summary></entry><entry><title>Regular Expressions To Mute Tweets</title><link href="http://jayhickey.com/2012/08/regular-expressions-to-mute-tweets" rel="alternate"></link><updated>2012-08-16T02:16:00-04:00</updated><author><name>Jay Hickey</name></author><id>tag:jayhickey.com,2012-08-16:2012/08/regular-expressions-to-mute-tweets</id><summary type="html">&lt;p&gt;In my &lt;a href="http://jayhickey.com/2012/08/markdownify-instagram"&gt;Markdownify Instagram&lt;/a&gt; post, I used regular expressions to create a Python dictionary out of information in a text file. While we're on the topic, &lt;a href="https://gist.github.com/3144371"&gt;this is a nice collection&lt;/a&gt; of regular expressions you can use to filter your tweets. Helpful for removing some of the garbage people post on Twitter. The hashtag abuse ones are particularly useful. And if you like those, there's even more &lt;a href="https://github.com/jordanekay/SilencedBots"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I believe &lt;a href="http://tapbots.com/software/tweetbot/"&gt;Tweetbot&lt;/a&gt; is the only Twitter client that has regex support. You can add a new mute filter by clicking on the mute button in the tab bar, then clicking "Edit" &lt;span&gt;&amp;rarr;&lt;/span&gt; "+" &lt;span&gt;&amp;rarr;&lt;/span&gt; "Mute Keyword", and sliding the Regular Expression slider to "ON" after you enter an expression in the field.&lt;/p&gt;
&lt;!-- 
markdownify Instagram link
tweetbot link
Arrows
Link to other regex filters
--&gt;</summary></entry><entry><title>Perfect Sunset. I'm Never Leaving This Condo.</title><link href="http://jayhickey.com/2012/08/perfect-sunset" rel="alternate"></link><updated>2012-08-16T01:23:00-04:00</updated><author><name>Jay Hickey</name></author><id>tag:jayhickey.com,2012-08-16:2012/08/perfect-sunset</id><summary type="html">&lt;p&gt;&lt;img alt="Perfect sunset. I'm never leaving this condo" src="http://jayhickey.com/media/instagram/2012-08-16_051858.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;(Via &lt;a href="http://instagram.com"&gt;Instagram&lt;/a&gt;)&lt;/p&gt;</summary></entry><entry><title>Luau in Maui</title><link href="http://jayhickey.com/2012/08/luau-in-maui" rel="alternate"></link><updated>2012-08-15T01:25:00-04:00</updated><author><name>Jay Hickey</name></author><id>tag:jayhickey.com,2012-08-15:2012/08/luau-in-maui</id><summary type="html">&lt;p&gt;&lt;img alt="Luau in Maui" src="http://jayhickey.com/media/instagram/2012-08-15_052555.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;(Via &lt;a href="http://instagram.com"&gt;Instagram&lt;/a&gt;)&lt;/p&gt;</summary></entry><entry><title>Markdownify Instagram</title><link href="http://jayhickey.com/2012/08/markdownify-instagram" rel="alternate"></link><updated>2012-08-12T02:03:00-04:00</updated><author><name>Jay Hickey</name></author><id>tag:jayhickey.com,2012-08-12:2012/08/markdownify-instagram</id><summary type="html">&lt;p&gt;I've been thinking for a while now about how nice it would be to automatically create a Markdown post of the Instagram photos I take. I looked around at Instagram's API's and, while I could probably set up a way to pull directly from the API, I wanted to throw something together quickly. I'm on my way to &lt;a href="http://en.wikipedia.org/wiki/Maui"&gt;Maui&lt;/a&gt; for vacation, so I spent an evening making this handy little Python script that'll enable me to easily post my Instagram photos to jayhickey.com.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt; 
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;glob&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;glob&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;urllib&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;localtime&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;strftime&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;read_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c"&gt;# Check for filename for Instagram file from IFTTT&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;fileLines&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readlines&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;fileDict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="c"&gt;# Create a dictionary with the Instagram info&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;fileLines&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;r&amp;#39;([\w\@\.]+)\s*:\s*(.*)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;fileDict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fileDict&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_draft&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fileDict&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;draftLoc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;imgLink&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c"&gt;# Replace non alphanumerics with dashes for filename&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;r'[\t !"#$:;%&amp;\'()*\-/&lt;=&gt;?@\[\\\]^_`{|},.]+'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;-&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;fileDict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Caption&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c"&gt;# Embed the photo with Markdown&lt;/span&gt;
    &lt;span class="n"&gt;draft&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;draftLoc&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;.md&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;w&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;draft&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fileDict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Caption&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;draft&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;=====================&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;draft&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Link: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fileDict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;URL&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;draft&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;publish-not-yet&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;imgLink&lt;/span&gt;
    &lt;span class="n"&gt;draft&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;![&lt;/span&gt;&lt;span class="si"&gt;%(1)s&lt;/span&gt;&lt;span class="s"&gt;](&lt;/span&gt;&lt;span class="si"&gt;%(2)s&lt;/span&gt;&lt;span class="s"&gt;)&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;fileDict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Caption&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;2&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;imgLink&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="n"&gt;draft&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;(Via [Instagram](http://instagram.com))&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;draft&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c"&gt;# These might not be used, so make them empty&lt;/span&gt;
    &lt;span class="n"&gt;Local_Image_URL_Path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;Website&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;

    &lt;span class="c"&gt;# Read input arguments&lt;/span&gt;
    &lt;span class="n"&gt;IFTTT_Read_Path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;Draft_Write_Path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="c"&gt;# These parameters are optional&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;Local_Image_URL_Path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;Website&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="c"&gt;# Make sure the file is a text file from Instagram&lt;/span&gt;
    &lt;span class="n"&gt;fileList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;glob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IFTTT_Read_Path&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;*instagr.am*.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;fileList&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

        &lt;span class="c"&gt;# Read the Instagram data&lt;/span&gt;
        &lt;span class="n"&gt;fileDict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;read_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;Local_Image_URL_Path&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;Website&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c"&gt;# Make a local copy of the image and date it&lt;/span&gt;
            &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;URLopener&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;eventTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%Y-%m-&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt;_%H%M%S&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;localtime&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="n"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fileExtension&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;splitext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fileDict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Source&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="n"&gt;imgLinkPath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;IFTTT_Read_Path&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;eventTime&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fileExtension&lt;/span&gt;
            &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;retrieve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fileDict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Source&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;imgLinkPath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;imgURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Website&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Local_Image_URL_Path&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;eventTime&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fileExtension&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c"&gt;# Use the image hosted by Instagram&lt;/span&gt;
            &lt;span class="n"&gt;imgURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fileDict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Source&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

        &lt;span class="c"&gt;# Create a Markdown draft&lt;/span&gt;
        &lt;span class="n"&gt;create_draft&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fileDict&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Draft_Write_Path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;imgURL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c"&gt;# Delete the Instagram text file from IFTTT&lt;/span&gt;
        &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;Here's the input to run it (the last two parameters are optional):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;MarkdownifyInstagram&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;IFTTT_Read_Path&lt;/span&gt;&lt;span class="p"&gt;}},&lt;/span&gt; &lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;Draft_Write_Path&lt;/span&gt;&lt;span class="p"&gt;}},&lt;/span&gt; &lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;Local_Image_URL_Path&lt;/span&gt;&lt;span class="p"&gt;}},&lt;/span&gt; &lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;Website&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;python MarkdownifyInstagram.py /home/blog/secondcrack/www/media/instagram/ /home/blog/Dropbox/Blog/drafts/ /media/instagram/ http://jayhickey.com
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The downside to using IFTTT, according to their hilariously titled &lt;a href="http://ifttt.com/wtf"&gt;/wtf page&lt;/a&gt;, is that it only polls for new data every 15 minutes. So this won't happen instantly.&lt;sup id="fnref:imp"&gt;&lt;a class="footnote-ref" href="#fn:imp" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/jayhickey/MarkdownifyInstagram"&gt;GitHub&lt;/a&gt; is where you can find all the instructions for setting up the IFTTT recipe, running Markdownify Instagram, and even how to use a shell script and &lt;code&gt;iNotify&lt;/code&gt; to automate the process. I won't go into any of that here. However, I do think it's interesting to dive a little deeper and see how the script works.&lt;/p&gt;
&lt;h2&gt;Implementation&lt;/h2&gt;
&lt;p&gt;Here's a look at a few of the design decisions I made while writing Markdownify Instagram.&lt;/p&gt;
&lt;h3&gt;Reading the text file from IFTTT&lt;/h3&gt;
&lt;p&gt;When triggered, the &lt;a href="http://ifttt.com/recipes/49883"&gt;IFTTT recipe&lt;/a&gt; will create a plain text file with a name like &lt;code&gt;http-instagr.ampoefb-ihvv0.txt&lt;/code&gt; and these contents:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;URL: http://instagram.com/p/JF1n/
Source: http://distillery.s3.amazonaws.com/media/2010/11/03/217c074328864f76b5d730837403f371_7.jpg
Caption: Deadly.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Python's built in &lt;a href="http://docs.python.org/library/glob.html"&gt;glob module&lt;/a&gt; is first used to create a list of all the Instagram text files in your &lt;code&gt;{{IFTTT_Read_Path}}&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;fileList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;glob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;glob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IFTTT_Read_Path&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;*instagr.am*.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;*&lt;/code&gt; will match zero or more characters, so a file that starts with anything, contains &lt;code&gt;instagr.am&lt;/code&gt;, ends with &lt;code&gt;.txt&lt;/code&gt;, and has anything in between will be appended to &lt;code&gt;fileList&lt;/code&gt;. This is the first time I've actually used the glob module. Although less powerful than regular expressions, it's perfect for finding specific files in directories.&lt;/p&gt;
&lt;h3&gt;Creating a dictionary from the data&lt;/h3&gt;
&lt;p&gt;After getting a list of files, &lt;code&gt;read_file&lt;/code&gt; uses &lt;code&gt;readlines()&lt;/code&gt; to split the text into individual lines. The regex pattern &lt;code&gt;r'([\w\@\.]+)\s*:\s*(.*)'&lt;/code&gt;  creates &lt;code&gt;matchobject&lt;/code&gt;'s out of those lines, then lastly the dictionary &lt;code&gt;fileDict&lt;/code&gt; is created from the matches:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;fileLines&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;r&amp;#39;([\w\@\.]+)\s*:\s*(.*)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;fileDict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Regex is hard to look at, but it's not too bad once you grasp the syntax. Google's &lt;a href="http://code.google.com/edu/languages/google-python-class/regular-expressions.html"&gt;regular expressions tutorial&lt;/a&gt; is a good place to start, and you can learn a whole lot more just by searching the web. Each set of parenthesis corresponds to a group match that will be stored in an additional element of &lt;code&gt;x&lt;/code&gt;. Because there are two sets of parenthesis, &lt;code&gt;x&lt;/code&gt; will have a group size of 3. &lt;code&gt;x.group(0)&lt;/code&gt; will contain all of &lt;code&gt;line&lt;/code&gt;, &lt;code&gt;x.group(1)&lt;/code&gt; will contain the text before the : (the first set of parenthesis in the regex), and x.group(2) will have everything after (the second set). Like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x.group(0) = 'URL: http://instagram.com/p/JF1n/'&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x.group(1) = 'URL'&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x.group(2) = 'http://instagram.com/p/JF1n/'&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After the &lt;code&gt;for&lt;/code&gt; loop completes, fileDict will look something like this&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;fileDict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;URL&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;http://instagram.com/p/JF1n/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Source&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;http://distillery.s3.amazonaws.com/media/2010/11/03/217c074328864f76b5d730837403f371_7.jpg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Caption&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Deadly.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So printing the URL is as simple as typing &lt;code&gt;print fileDict['URL']&lt;/code&gt;. &lt;/p&gt;
&lt;!-- Mention Local hosting instead of Amazon S3 --&gt;

&lt;h3&gt;Saving the local image file&lt;/h3&gt;
&lt;p&gt;If the last two parameters are entered, your photo will be saved locally—so you aren't relying on Instagram's S3 hosting. If Facebook ever decides to shut down Instagram, you won't have a broken embedded image. To accomplish this, I used the Python &lt;code&gt;urllib&lt;/code&gt; module to save an image from a URL by setting &lt;code&gt;image = urllib.URLopener()&lt;/code&gt;, then&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;retrieve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fileDict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Source&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;imgLinkPath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;where &lt;code&gt;fileDict['Source']&lt;/code&gt; is the link to the Instagram image and &lt;code&gt;imgLinkPath&lt;/code&gt; is where the image saved will be saved, e.g., &lt;code&gt;/home/blog/secondcrack/www/media/instagram/2012-11-30_062759.jpg&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The local image is named using &lt;code&gt;strftime("%Y-%m-%d_%H%M%S", localtime())&lt;/code&gt;. This creates a string formatted something like &lt;code&gt;2012-11-30_062759&lt;/code&gt;, where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;%Y is the year with century as a decimal (use %y for without century, resulting in &lt;code&gt;12&lt;/code&gt; instead of &lt;code&gt;2012&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;%m is the month from &lt;code&gt;[01-12]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;%d is the day of the month from &lt;code&gt;[01-31]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;%H is the hour in 24-hour time (use &lt;code&gt;%I&lt;/code&gt; for 12-hour time)&lt;/li&gt;
&lt;li&gt;%M is the minute from &lt;code&gt;[00-59]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;%S is the second from &lt;code&gt;[00-61]&lt;/code&gt;&lt;sup id="fnref:time"&gt;&lt;a class="footnote-ref" href="#fn:time" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can see the see the other &lt;code&gt;strftime&lt;/code&gt; directives &lt;a href="http://docs.python.org/library/time.html#time.strftime"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I've been using this convention ever since Gabe over at MacDrifter &lt;a href="http://www.macdrifter.com/2012/07/why-file-time-stamps-are-unreliable.html"&gt;recommended it&lt;/a&gt;. It's very easy to both sort and quickly look at. I love it so much I even set this as a &lt;a href="http://smilesoftware.com/TextExpander/"&gt;TextExpander&lt;/a&gt; shortcut for naming files and photos on my Mac:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Textexpander" src="http://jayhickey.com/media/2012/08/2012-08-10_031115.png" /&gt;&lt;/p&gt;
&lt;h3&gt;Creating the Markdown draft&lt;/h3&gt;
&lt;p&gt;The final function, &lt;code&gt;create_draft&lt;/code&gt;, is pretty straightforward and will create a Markdown file that looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Deadly.
=====================
type: Link
publish-not-yet

![Deadly.](http://jayhickey.com/media/instagram/2010-11-03_062759.jpeg)
(Via [Instagram](http://instagram.com))
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Overall, I'm pretty happy with the way Markdownify Instagram turned out. It produces a nice, simple post that's easy to modify.&lt;sup id="fnref:mod"&gt;&lt;a class="footnote-ref" href="#fn:mod" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt; There's also tons of possiblities for new features and expansions. I find it extremely useful, so get prepared for an influx of pictures posted here. Aloha!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; I've made a small addition to the script's &lt;code&gt;create_draft&lt;/code&gt; function. Non-alphanumerics are now replaced with dashes in the filename. So any spaces or special characters will be turned into dashes for the .md slug. &lt;/p&gt;
&lt;p&gt;I used a little more regex magic to make the substitution. Here's what it looks like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt; &lt;span class="c"&gt;# Repace non-alphanumerics with dashes for filename&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;r&amp;#39;[\t !&amp;quot;#$:;%&amp;amp;&lt;/span&gt;&lt;span class="se"&gt;\&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;()*\-/&amp;lt;=&amp;gt;?@\[&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;\]^_`{|},.]+&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;-&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;fileDict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Caption&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Make sure to grab the latest commit off &lt;a href="https://github.com/jayhickey/MarkdownifyInstagram"&gt;GitHub&lt;/a&gt; so you have this feature.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:time"&gt;
&lt;p&gt;Why &lt;code&gt;[00-61]&lt;/code&gt; instead of &lt;code&gt;[00-59]&lt;/code&gt;? To account for both leap seconds and the very rare double leap seconds, when they occur. &amp;#160;&lt;a class="footnote-backref" href="#fnref:time" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:imp"&gt;
&lt;p&gt;Although it would be nice if it were instant, I don't think this is a very big deal.&amp;#160;&lt;a class="footnote-backref" href="#fnref:imp" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:mod"&gt;
&lt;p&gt;If you wanted, you could even tweak the &lt;code&gt;create_draft&lt;/code&gt; function to include some additional html tags before and after the image for easy CSS tweaking. Make it look like a Polaroid or something.&amp;#160;&lt;a class="footnote-backref" href="#fnref:mod" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary></entry><entry><title>Digia to Acquire Qt from Nokia</title><link href="http://jayhickey.com/2012/08/digia-to-acquire-qt-from-nokia" rel="alternate"></link><updated>2012-08-09T11:30:00-04:00</updated><author><name>Jay Hickey</name></author><id>tag:jayhickey.com,2012-08-09:2012/08/digia-to-acquire-qt-from-nokia</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;Digia becomes responsible for all the Qt activities formerly carried out by Nokia. These include product development, as well as the commercial and open source licensing and service business. Following the acquisition, Digia plans to quickly enable Qt on Android, iOS and Windows 8 platforms.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is a great move. I use Qt heavily to develop desktop GUIs for work, and am a big fan of it for cross-platform applications. The SDK released back in 2010 is a nice environment to work in, but I've had so many nightmares trying to bundle applications for older Linux machines (specifically Fedora 9 equipment that can't be upgraded), that I always end up resorting back to Qt Creator. I hope Digia starts pushing Qt forward at a faster, more modern pace. They bought the commercial licensing and professional services side of Qt over a year ago, so this should be a smooth transition.&lt;/p&gt;
&lt;p&gt;Digia's plans to add in modern mobile development in Qt will also be interesting. I've never dabbled with any Symbian or Meego development in Qt, but once Nokia announced their transition to Windows Phone, it was pretty obvious Qt's mobile front had a dark future with them at the helm. Turning this new direction, I'm excited to see how iOS development will be implemented in Qt.&lt;/p&gt;</summary></entry><entry><title>Why Olympic Swimming Records Aren't Being Broken</title><link href="http://jayhickey.com/2012/08/why-olympic-swimming-records-arent-being-broken" rel="alternate"></link><updated>2012-08-01T09:53:00-04:00</updated><author><name>Jay Hickey</name></author><id>tag:jayhickey.com,2012-08-01:2012/08/why-olympic-swimming-records-arent-being-broken</id><summary type="html">&lt;p&gt;I remember the commotion around ultra efficient &lt;a href="http://en.wikipedia.org/wiki/LZR_Racer"&gt;Speedo LZR Racer&lt;/a&gt; during the Beijing Olympics, but I didn't realize they were banned in '09:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;At the 2009 World Championships in Rome, swimmers set 43 world records in the last major meet for the super suits, which were banned at the end of that year. Since then, only five swimming world records have been broken — the three thus far in London and two at the 2011 World Championships in Shanghai.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;How they work&lt;/h2&gt;
&lt;p&gt;The suits are a mix of woven elastane-nylon and polyurethane panels that were wind tunnel tested by NASA—making it smoother than shaven skin. And instead of sewed together, the the seams are ultrasonically welded (yes, using &lt;em&gt;sound&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;These factors contribute to the hydrodynamics by reducing drag, and the LZR Racer then compresses the body and traps air for added buoyancy. On the downside, they can only be worn once or twice. Because of the thinness of the materials, a rip can happen at any moment. But when you have &lt;a href="http://www.london2012.com/news/articles/review-phelps-books-his-place-history.html"&gt;19 Olympic Medals&lt;/a&gt;&lt;sup id="fnref:outdated"&gt;&lt;a class="footnote-ref" href="#fn:outdated" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;, that's just a business expense.&lt;/p&gt;
&lt;p&gt;A small tidbit for you fashionistas—the cosmetics of the LZR were designed by Comme De Garçons.&lt;/p&gt;
&lt;h2&gt;Banning&lt;/h2&gt;
&lt;p&gt;Swimmers started to wear multiple LZR's overtop one another for an added buoyancy effect. &lt;a href="http://en.wikipedia.org/wiki/Therese_Alshammar"&gt;Therese Alshammar&lt;/a&gt; of Sweden had her world record in the 50m butterfly taken from her because she used two suits, claiming the second was backup for a possible "wardrobe malfunction" if the top suit tore.&lt;/p&gt;
&lt;p&gt;But &lt;a href="http://en.wikipedia.org/wiki/FINA"&gt;FINA&lt;/a&gt; stepped in, and started limiting the suits' buoyancy and thickness. Buoyancy must now be below 0.5 Newton and have a thickness no greater than 0.8mm. Also no more than 50% of the suit can be covered in non-permeable materials (such as the NASA polyurethane panels).&lt;/p&gt;
&lt;p&gt;I understand the reasoning for the ban, but it's a shame that such a fascinating use of technology will be stunted by Olympic rules. &lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:outdated"&gt;
&lt;p&gt;This will probably be outdated in the next 24-48 hours.&amp;#160;&lt;a class="footnote-backref" href="#fnref:outdated" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary></entry></feed>